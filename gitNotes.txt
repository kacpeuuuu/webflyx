Files have states in Git
    untracked: Not being tracked by Git
    staged: Marked for inclusion in the next commit
    committed: Saved to the repository's history

git status - checks the status of the files in a directory


git config --add --local <section.key> "name the value of the key" 
git config --add --global <section.key> "name the value of the key" 

git config --get <section.key>
git config --unset <section.key>
git config --unset-all <section.key>            if a key has multiple instances use this if all values are to be deleted
                                                --unset flag only works with a single instance of a key.


git config --remove-section <section>


There are several locations where Git can be configured. From more general to more specific, they are:

    system: /etc/gitconfig, a file that configures Git for all users on the system
    global: ~/.gitconfig, a file that configures Git for all projects of a user
    local: .git/config, a file that configures Git for a specific project
    worktree: .git/config.worktree, a file that configures Git for part of a project

checking existing branches
    git branch
    
creating a branch
    git branch my_new_branch
switching to use the brand new branch
    git switch my_new_branch

doing it in one go
    git switch -c my_new_branch // creates and switches to the new branch if does not exist creates it

graphing commits
    git log --oneline
    git log --decorate=short
    git log --decorate=
    git log --decorate=no


graphing the merge tree
    git log --oneline --decorate --graph --parents


A fast-forward merge is the simplest kind of merge. It happens when the current branch has not diverged from 
the branch you're merging in â€” meaning the current branch is behind but not different from the target branch.

A - B - C
        \
         D - E

becomes
     
A - B - C - D - E


REBASE

          A---B---C topic
         /
    D---E---F---G master
becomes

git rebase master

                  A'--B'--C' topic
                 /
    D---E---F---G master

rebase avoids merging, it reapplies commits on top of our base tip

REMOTES
a remote is just another repo
git remote add <name> <url>

downloading files of the remote
    git fetch

logging the remote 
    git log remote/branch
            <name>/<branch>

merging files
    git merge remote/branch
    git merge origin/webflyx


Run git config pull.rebase false - to make sure git will merge on a pull
git pull origin main - to pull in the most recent J commit that you made remotely. You should see that it starts a merge commit.


boot.dev workflow

    Make changes to files
    git add . (or git add <files> if I only want to add specific files)
    git commit -m "a message describing the changes"
    git push origin main





When you're working with a team, Git gets a bit more involved (and we'll cover more of this in part 2 of this course). Here's what I do:

    Update my local main branch with git pull origin main
    Checkout a new branch for the changes I want to make with git switch -c <branchname>
    Make changes to files
    git add .
    git commit -m "a message describing the changes"
    git push origin <branchname> (I push to the new branch name, not main)
    Open a pull request on GitHub to merge my changes into main
    Ask a team member to review my pull request
    Once approved, click the "Merge" button on GitHub to merge my changes into main
    Delete my feature branch, and repeat with a new branch for the next set of changes


Here are some rules of thumb for coding projects:

    Ignore things that can be generated (e.g. compiled code, minified files, etc.)
    Ignore dependencies (e.g. node_modules, venv, packages, etc.)
    Ignore things that are personal or specific to how you like to work (e.g. editor settings)
    Ignore things that are sensitive or dangerous (e.g. .env files, passwords, API keys, etc.)
